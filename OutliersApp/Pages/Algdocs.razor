@page "/algdocs"
@using Newtonsoft.Json
@using OutliersLib.ParameterTypes
@using System.IO
@using OutliersApp.Models.Parameters
@using OutliersLib

<div class="container bg-light border rounded shadow p-3">
    @if (ConfigNotLoaded)
    {
        <div class="container mb-4 border border-danger rounded p-3">
            Не удалось загрузить Config.
        </div>
    }
    @foreach (var alg in Config.Algorithms)
    {
        <div class="container border rounded mb-3 p-3">
            <h2>@(alg.Value.CoolName)</h2><span class="badge badge-secondary">id:"@alg.Key"</span>
            <h5>Описание: </h5>
            <p>@(GetDocs(alg.Key))</p>
            <h5>Параметры@(alg.Value.Parameters.Count == 0 ? " отсутствуют." : ":")</h5>

            @foreach (var param in alg.Value.Parameters)
            {
                <p>@param.Key :</p>
                <ul>
                    <li>Тип: @param.Value.GetType().Name</li>
                    @if (param.Value is DoubleParameter doubleParameter)
                    {
                        <li>Мин. значение: @doubleParameter.Min</li>
                        <li>Макс. значение: @doubleParameter.Max</li>
                    }
                    @if (param.Value is IntParameter intParameter)
                    {
                        <li>Мин. значение: @intParameter.Min</li>
                        <li>Макс. значение: @intParameter.Max</li>
                    }
                    @if (param.Value.DefaultToString() != string.Empty)
                    {
                        <li>Значение по умолчанию: @param.Value.DefaultToString()</li>
                    }
                    @if (param.Value is SelectParameter && !((param.Value as SelectParameter).Options is null))
                    {
                        <div>Опции для выбора:</div>
                        <ul>
                            @foreach (var item in (param.Value as SelectParameter).Options)
                            {
                                <li>@item</li>
                            }
                        </ul>
                    }
                </ul>
            }
        </div>
    }
</div>

@code{

    public Config Config { get; set; }
    public bool ConfigNotLoaded { get; set; }


    protected async override Task OnInitializedAsync()
    {
        Config = new Config();
        ConfigNotLoaded = false;
        try
        {
            await FetchData();
        }
        catch
        {
            ConfigNotLoaded = true;
        }

        if (Config is null)
        {
            Config = new Config();
        }

        await base.OnInitializedAsync();
    }

    public async Task FetchData()
    {
        HttpClient client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost/api/config/");
        var response = await client.SendAsync(request);
        Config = JsonConvert.DeserializeObject<Config>(await response.Content.ReadAsStringAsync(),
            new JsonSerializerSettings {NullValueHandling = NullValueHandling.Ignore});
    }

    public string GetDocs(string key)
    {
        try
        {
            return File.ReadAllText("Docs/Algorithms/" + key + ".txt");
        }
        catch
        {
            return "отсутствует.";
        }
    }

}