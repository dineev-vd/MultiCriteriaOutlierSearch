@using OutliersLib.ParameterTypes
@namespace OutliersApp.Components.Parameters

<div class="input-group" style="margin-top: 8px;">
    <div class="input-group-prepend">
        <span class="input-group-text">@(FormAsSelect.FullName == string.Empty ? SettingsForm.Key : FormAsSelect.FullName) </span>
    </div>
    <select class="custom-select" @onchange="@(e => FormAsSelect.SetValue(e.Value.ToString()))">
        <option label="Выберите значение... (default=@FormAsSelect.Default)"></option>
        @foreach (var option in FormAsSelect.Options)
        {
            <option label="@option" selected="@(option == FormAsSelect.Value)">@option</option>
        }
    </select>
    @if (FormAsSelect.IsCustom)
    {
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick=@(async e => await OnDelete.InvokeAsync(SettingsForm))>Удалить</button>
        </div>
    }
</div>


@code{

    [Parameter]
    public EventCallback<KeyValuePair<string, ParameterBase>> OnDelete { get; set; }

    [Parameter]
    public KeyValuePair<string, ParameterBase> SettingsForm { get; set; }

    private SelectParameterModel FormAsSelect
    {
        get => SettingsForm.Value as SelectParameterModel;
    }

}