@using OutliersLib.ParameterTypes
@namespace OutliersApp.Components.Parameters

<div class="input-group" style="margin-bottom: 8px;">
    <div class="input-group-prepend">
        <span class="input-group-text">@(FormAsString.FullName == string.Empty ? SettingsForm.Key : FormAsString.FullName) </span>
    </div>
    <input type="text" placeholder="default=@FormAsString.Default" value="@FormAsString.StringValue" class="form-control" @oninput=@(e => FormAsString.SetValue(e.Value.ToString())) required />

    @if (FormAsString.IsCustom)
    {
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="@(async e => await OnDelete.InvokeAsync(SettingsForm))">Удалить</button>
        </div>
    }
</div>

@code{
    [Parameter]
    public EventCallback<KeyValuePair<string, ParameterBase>> OnDelete { get; set; }

    [Parameter]
    public KeyValuePair<string, ParameterBase> SettingsForm { get; set; }

    private StringParameterModel FormAsString
    {
        get => SettingsForm.Value as StringParameterModel;
    }

}