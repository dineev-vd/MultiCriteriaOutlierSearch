
@using OutliersLib.ParameterTypes
@namespace OutliersApp.Components.Parameters

<div class="input-group" style="margin-bottom: 8px;">
    <div class="input-group-prepend">
        <span class="input-group-text">@(FormAsInt.FullName == string.Empty ? SettingsForm.Key : FormAsInt.FullName) </span>
    </div>
    <input type="text" placeholder="значение_по_умолчанию=@FormAsInt.Default" value="@FormAsInt.StringValue" class="form-control @(FormAsInt.IsValid ? "" : "is-invalid")" @oninput=@(e => FormAsInt.SetValue(e.Value.ToString())) required/>
    <div class="invalid-feedback">
        @FormAsInt.ErrorMessage
    </div>


    @if (FormAsInt.IsCustom)
    {
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick=@(async e => await OnDelete.InvokeAsync(SettingsForm))>Удалить</button>
        </div>
    }
</div>


@code{

    [Parameter]
    public EventCallback<KeyValuePair<string, ParameterBase>> OnDelete { get; set; }

    [Parameter]
    public KeyValuePair<string, ParameterBase> SettingsForm { get; set; }

    private IntParameterModel FormAsInt
    {
        get => SettingsForm.Value as IntParameterModel;
    }

}