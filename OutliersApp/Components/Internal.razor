@using OutliersLib
@using OutliersApp.Models.Parameters
@using OutliersApp.Models
@using OutliersApp.Components.Parameters
@using OutliersApp.Models.ParameterModels
@using Microsoft.AspNetCore.Components.Web
@namespace OutliersApp.Components

<div class="input-group my-2">

    @*Надпись слева*@
    <div class="input-group-prepend">
        <span class="input-group-text">Имя модуля</span>
    </div>

    @*Поле выбора справа*@
    <select class="custom-select @(Model.NotSelected ? "is-invalid" : "")" @onchange="@OnSelect">
        <option label="Выберите алгоритм..." disabled selected="@(Model.Selected.Name == string.Empty)"></option>
        @foreach (var module in Model.InternalModulesList)
        {
            <option label="@module.CoolName" selected="@(Model.Selected.Name == module.Name)">@module.Name</option>
        }
    </select>

</div>

@{ int local = 0; }
@foreach (var setting in Model.Selected.Settings)
{
    @if (setting.Value is DoubleParameterModel)
    {
        <DoubleParameter SettingsForm="@setting"></DoubleParameter>
    }

    @if (setting.Value is SelectParameterModel)
    {
        <SelectParameterComponent SettingsForm="@setting"></SelectParameterComponent>
    }

    @if (setting.Value is BoolParameterModel)
    {
        <BoolParameterComponent Id="@(Id + "-i-" + local)" SettingsForm="@setting"></BoolParameterComponent>
    }

    @if (setting.Value is StringParameterModel)
    {
        <StringParameterComponent SettingsForm="@setting"></StringParameterComponent>
    }

    @if (setting.Value is IntParameterModel)
    {
        <IntParameterComponent SettingForm="@setting"></IntParameterComponent>
    }
    local++;
}

@code{

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public InternalFormModel Model { get; set; }

    public void OnSelect(ChangeEventArgs args)
    {
        string selectedName = args.Value.ToString();
        foreach (var internalModule in Model.InternalModulesList)
        {
            if (internalModule.Name == selectedName)
            {
                Model.Selected = internalModule;
                Model.NotSelected = false;
            }
        }
    }

}