@using OutliersLib
@using OutliersApp.Models
@using System.Linq
@using OutliersApp.Components.Parameters
@using OutliersLib.ParameterTypes
@using Microsoft.AspNetCore.Components.Web
@namespace OutliersApp.Components
@*Имя*@
<div class="input-group" style="margin-bottom: 8px; margin-top:8px;">
    <div class="input-group-prepend">
        <span class="input-group-text">Имя</span>
    </div><input type="text" class="form-control" @bind="@Model.Name" />
</div>
<div class="input-group" style="margin-bottom: 8px; margin-top:8px;">
    <div class="input-group-prepend">
        <span class="input-group-text">URL</span>
    </div><input type="text" class="form-control" @bind="@Model.Uri" />
</div>

<p>Параметры:</p>
<div class="input-group">
    <div class="input-group-prepend">
        <select class="custom-select" id="inputGroupSelect04" @onchange="@OnChange">
            <option selected disabled>Выберите тип параметра...</option>
            <option label="Double">double</option>
            <option label="Boolean">bool</option>
            <option label="String">string</option>
            <option label="Integer">int</option>
        </select>
    </div>
    <input type="text" class="form-control" placeholder="Введите имя..." @oninput=@(e => CustomName = e.Value.ToString())>
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick=@AddSetting>Добавить</button>
    </div>
</div>

@{ int local = 0;}
@foreach (var setting in Model.Settings)
{
    <div class="mb-3">
    @if (setting.Value is DoubleParameterModel)
    {
        <DoubleParameterComponent SettingsForm="@setting" OnDelete="@((i) => Model.Settings.Remove(i.Key))"></DoubleParameterComponent>
    }

    @if (setting.Value is SelectParameterModel)
    {
        <SelectParameterComponent SettingsForm="@setting" OnDelete="@((i) =>  Model.Settings.Remove(i.Key))"></SelectParameterComponent>
    }

    @if (setting.Value is BoolParameterModel)
    {
        <BoolParameterComponent Id="@(Id+"-e-"+local)" SettingsForm="@setting" OnDelete="@((i) => Model.Settings.Remove(i.Key))"></BoolParameterComponent>
    }

    @if (setting.Value is StringParameterModel)
    {
        <StringParameterComponent SettingsForm="@setting" OnDelete="@((i) => Model.Settings.Remove(i.Key))"></StringParameterComponent>
    }
    
    @if (setting.Value is IntParameterModel)
    {
        <IntParameterComponent SettingsForm="@setting" OnDelete="@((i) => Model.Settings.Remove(i.Key))"></IntParameterComponent>
    }
    </div>
    
    local++;
}

@code{
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public ExternalFormModel Model { get; set; }

    public string Selected { get; set; }

    public string CustomName { get; set; }

    public void OnChange(ChangeEventArgs args)
    {
        Selected = args.Value.ToString();
    }

    public void AddSetting()
    {
        if (CustomName == string.Empty || CustomName is null)
        {
            // Когда имя пустое
            return;
        }

        if (Model.Settings.ContainsKey(CustomName))
        {
            return;
        }

        if (Selected == "double")
        {
            Model.Settings.Add(CustomName, new DoubleParameterModel{IsCustom = true});
        }

        if (Selected == "bool")
        {
            Model.Settings.Add(CustomName, new BoolParameterModel{IsCustom = true});
        }

        if (Selected == "string")
        {
            Model.Settings.Add(CustomName, new StringParameterModel{IsCustom = true});
        }

        if (Selected == "int")
        {
            Model.Settings.Add(CustomName, new IntParameterModel{IsCustom = true});
        }
    }

}