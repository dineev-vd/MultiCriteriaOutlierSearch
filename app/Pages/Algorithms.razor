<form class="needs-validation">
    <h4>Алгоритмы</h4>
    <h6 class="text-muted mb-2">Список алгоритмов для выполнения</h6>
    <div role="tablist" id="accordion-1">
        @for (int i = 0; i < UserInstance.Algorithms.Count; i++)
        {
            var local = i;
            <div class="card collapse" id="card-@local">
                <form class="needs-validation">
                    <div role="tab" class="card-header">
                        <h5 class="mb-0">
                            <a data-toggle="collapse" aria-expanded="true" aria-controls="accordion-1 .item-@local" href="#accordion-1 .item-@local">Accordion Item</a>
                        </h5>
                        <button class="btn btn-primary" type="button" @onclick="@((e) => UserInstance.Algorithms.RemoveAt(local))">Удалить</button>
                    </div>
                    <div role="tabpanel" data-parent="#accordion-1" class="collapse show item-@local">
                        <ModulePage Id="@local" @bind-Mod="@UserInstance.Algorithms[local]" Config="@Config.Algorithms" Accordeon="1"></ModulePage>
                    </div>
                </form>
            </div>
        }
    </div>
    <button class="btn btn-primary btn-block btn-sm" type="button" @onclick="OnClick">Добавить алгоритм</button>
    
    @*TODO: Разобраться с удалением (удаляется всегда последний)*@

    <h4>Комбинации</h4>
    <h6 class="text-muted mb-2">Список комбинаций для выполнения</h6>
    <div role="tablist" id="accordion-2">
        @for (int i = UserInstance.Algorithms.Count; i < UserInstance.Combinations.Count + UserInstance.Algorithms.Count; i++)
        {
            var local = i;
            <div class="card collapse" id="card-@local">
                <form class="needs-validation">
                    <div role="tab" class="card-header">
                        <h5 class="mb-0">
                            <a data-toggle="collapse" aria-expanded="true" aria-controls="accordion-2 .item-@local" href="#accordion-2 .item-@local">Accordion Item</a>
                        </h5>
                        <button class="btn btn-primary" type="button" @onclick="@((e) => UserInstance.Combinations.RemoveAt(local - UserInstance.Algorithms.Count))">Удалить</button>
                    </div>
                    <div role="tabpanel" data-parent="#accordion-1" class="collapse show item-@local">
                        <ModulePage Id="@local" @bind-Mod="@UserInstance.Combinations[local - UserInstance.Algorithms.Count]" Config="@Config.Combinations" Accordeon="2"></ModulePage>
                    </div>
                </form>
            </div>
        }
    </div>
    <button class="btn btn-primary btn-block btn-sm" type="button" @onclick="OnClickCombs">Добавить комбинацию</button>

    <div class="input-group">
        <textarea class="form-control @(TextValid ? "" : "invalid")" aria-label="With textarea" @bind="@values" @oninput=@((e) => TextValid = true) placeholder="Значения через запятую..."></textarea>
    </div>

    <button class="btn btn-primary btn-block btn-sm" type="button" @onclick="Send">Отправить</button>
</form>

@if (!(responses.AlgResponses is null))
{
    <table class="table">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">value</th>
            @foreach (var resp in responses.AlgResponses)
            {
                if (resp.Status == "OK")
                {
                    <th scope="col">@resp.Name</th>
                }
            }
            @foreach (var resp in responses.CombResponses)
            {
                if (resp.Status == "OK")
                {
                    <th scope="col">@resp.Name</th>
                }
            }
        </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < valueList.Count; i++)
        {
            var local = i;
            <tr>
                <th scope="row">@(local + 1)</th>
                <td>@valueList[local]</td>
                @foreach (var resp in responses.AlgResponses)
                {
                    @if (resp.Status == "OK")
                    {
                        <td>@resp.Data[local]</td>
                    }
                }
                @foreach (var resp in responses.CombResponses)
                {
                    @if (resp.Status == "OK")
                    {
                        <td>@resp.Data[local]</td>
                    }
                }
            </tr>
        }
        </tbody>
    </table>
}

@*TODO Проверка на корректность формы
*@

@using outliers_lib
@using Newtonsoft.Json
@using System.Runtime.CompilerServices
@inject IJSRuntime IJSRuntime

@code {
    OutlierRequestData UserInstance { get; set; }
    Config Config { get; set; }
    string str { get; set; }
    string req { get; set; }
    string values { get; set; } = "";
    List<double> valueList = new List<double>();
    Responses responses { get; set; }
    bool TextValid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Config = new Config();
        UserInstance = new OutlierRequestData();
        await FetchData();
        await base.OnInitializedAsync();
    }

    public async Task FetchData()
    {
        HttpClient client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost/api/config/");
        var response = await client.SendAsync(request);
        Config = JsonConvert.DeserializeObject<Config>(await response.Content.ReadAsStringAsync(), new JsonSerializerSettings {NullValueHandling = NullValueHandling.Ignore});
        StateHasChanged();
    }

    public void OnInput(ChangeEventArgs eventArgs)
    {
    }

    public void OnClick()
    {
        UserInstance.Algorithms.Add(new Module());
    }

    public void OnClickCombs()
    {
        UserInstance.Combinations.Add(new Module());
    }

    public class UIModule : Module
    {
        public int Id { get; set; }

        public UIModule(int id)
        {
            Id = id;
        }
    }

    public async void Send()
    {
        List<double> result;
        try
        {
            result = values.Split(',').Select(x => double.Parse(x)).ToList();
        }
        catch
        {
            TextValid = false;
            return;
        }

        UserInstance.Values = result;

        HttpClient client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "http://localhost/api/api/");
        request.Content = new StringContent(JsonConvert.SerializeObject(UserInstance), System.Text.Encoding.UTF8, "application/json");
        var response = await client.SendAsync(request);
        var algsandcombs = JsonConvert.DeserializeObject<Responses>(await response.Content.ReadAsStringAsync());
        responses = algsandcombs;
        valueList = result;
        str = await response.Content.ReadAsStringAsync();
        req = await request.Content.ReadAsStringAsync();
        Console.WriteLine(str);
        Console.WriteLine(req);
        StateHasChanged();
    }

    public struct Responses
    {
        public List<ModuleResponse> AlgResponses { get; set; }
        public List<ModuleResponse> CombResponses { get; set; }
    }

}