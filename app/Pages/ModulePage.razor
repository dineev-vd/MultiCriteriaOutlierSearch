<div class="card-body">
    <div class="custom-control custom-radio custom-control-inline">
        <input type="radio" id="@Id 1" name="customRadioInline @Id" class="custom-control-input" @onchange="@EnableName" checked>
        <label class="custom-control-label" for="@Id 1">Внутренний</label>
    </div>
    <div class="custom-control custom-radio custom-control-inline">
        <input type="radio" id="@Id 2" name="customRadioInline @Id" class="custom-control-input" @onchange="@DisableName">
        <label class="custom-control-label" for="@Id 2">Внешний</label>
    </div>
    @*Переключатель для внутренний/внешний*@

    <div class="collapse @(Mod.Internal ? "show" : "")">
        <Internal Mod=@Internal Config=@Config></Internal>
    </div>

    <div class="collapse @(Mod.Internal ? "" : "show")">
        <External Mod=@External></External>
    </div>
</div>


@inject IJSRuntime IJSRuntime;
@using outliers_lib
@using System.Globalization
@using app.Data

@code {

    [Parameter]
    public int Accordeon { get; set; }

    [Parameter]
    public Dictionary<string, ModuleSettings> Config { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public EventCallback<Module> ModChanged { get; set; }

    [Parameter]
    public Module Mod { get; set; }

    public Module Internal { get; set; }
    public Module External { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Internal = new Module() {Internal = true};
        External = new Module() {Internal = false};
        Mod = Internal;
        await ModChanged.InvokeAsync(Mod);
        await base.OnInitializedAsync();
    }

    public Task EnableName(ChangeEventArgs args)
    {
        Mod = Internal;
    //IJSRuntime.InvokeVoidAsync("myCollapse", $"choose_{Id}", "show");
        return ModChanged.InvokeAsync(Mod);
    }

    public Task DisableName(ChangeEventArgs args)
    {
    //Disabled = true;
    //IJSRuntime.InvokeVoidAsync("myCollapse", $"choose_{Id}", "hide");
        Mod = External;
        return ModChanged.InvokeAsync(Mod);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        IJSRuntime.InvokeVoidAsync("myCollapse", $"card-{Id}", "show");
        base.OnAfterRender(firstRender);
    }

}